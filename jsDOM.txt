The Document Object
When an HTML document is loaded into a web browser, it becomes a document object.

The document object is the root node of the HTML document.

The document object is a property of the window object.

The document object is accessed with:

window.document or just document

Examples
let url = window.document.URL;
let url = document.URL;
Document Object Properties and Methods
The following properties and methods can be used on HTML documents:

Property / Method	Description
activeElement	Returns the currently focused element in the document
addEventListener()	Attaches an event handler to the document
adoptNode()	Adopts a node from another document
anchors	Deprecated
applets	Deprecated
baseURI	Returns the absolute base URI of a document
body	Sets or returns the document's body (the <body> element)
charset	Deprecated
characterSet	Returns the character encoding for the document
close()	Closes the output stream previously opened with document.open()
cookie	Returns all name/value pairs of cookies in the document
createAttribute()	Creates an attribute node
createComment()	Creates a Comment node with the specified text
createDocumentFragment()	Creates an empty DocumentFragment node
createElement()	Creates an Element node
createEvent()	Creates a new event
createTextNode()	Creates a Text node
defaultView	Returns the window object associated with a document, or null if none is available.
designMode	Controls whether the entire document should be editable or not.
doctype	Returns the Document Type Declaration associated with the document
documentElement	Returns the Document Element of the document (the <html> element)
documentMode	Deprecated
documentURI	Sets or returns the location of the document
domain	Returns the domain name of the server that loaded the document
domConfig	Deprecated
embeds	Returns a collection of all <embed> elements the document
execCommand()	Deprecated
forms	Returns a collection of all <form> elements in the document
getElementById()	Returns the element that has the ID attribute with the specified value
getElementsByClassName()	Returns an HTMLCollection containing all elements with the specified class name
getElementsByName()	Returns an live NodeList containing all elements with the specified name
getElementsByTagName()	Returns an HTMLCollection containing all elements with the specified tag name
hasFocus()	Returns a Boolean value indicating whether the document has focus
head	Returns the <head> element of the document
images	Returns a collection of all <img> elements in the document
implementation	Returns the DOMImplementation object that handles this document
importNode()	Imports a node from another document
inputEncoding	Deprecated
lastModified	Returns the date and time the document was last modified
links	Returns a collection of all <a> and <area> elements in the document that have a href attribute
normalize()	Removes empty Text nodes, and joins adjacent nodes
normalizeDocument()	Deprecated
open()	Opens an HTML output stream to collect output from document.write()
querySelector()	Returns the first element that matches a specified CSS selector(s) in the document
querySelectorAll()	Returns a static NodeList containing all elements that matches a specified CSS selector(s) in the document
readyState	Returns the (loading) status of the document
referrer	Returns the URL of the document that loaded the current document
removeEventListener()	Removes an event handler from the document (that has been attached with the addEventListener() method)
renameNode()	Deprecated
scripts	Returns a collection of <script> elements in the document
strictErrorChecking	Deprecated
title	Sets or returns the title of the document
URL	Returns the full URL of the HTML document
write()	Writes HTML expressions or JavaScript code to a document
writeln()	Same as write(), but adds a newline character after each statement


The Element Object
In the HTML DOM, the Element object represents an HTML element, like P, DIV, A, TABLE, or any other HTML element.

Properties and Methods
The following properties and methods can be used on all HTML elements:

Property / Method	Description
accessKey	Sets or returns the accesskey attribute of an element
addEventListener()	Attaches an event handler to an element
appendChild()	Adds (appends) a new child node to an element
attributes	Returns a NamedNodeMap of an element's attributes
blur()	Removes focus from an element
childElementCount	Returns an elements's number of child elements
childNodes	Returns a NodeList of an element's child nodes
children	Returns an HTMLCollection of an element's child elements
classList	Returns the class name(s) of an element
className	Sets or returns the value of the class attribute of an element
click()	Simulates a mouse-click on an element
clientHeight	Returns the height of an element, including padding
clientLeft	Returns the width of the left border of an element
clientTop	Returns the width of the top border of an element
clientWidth	Returns the width of an element, including padding
cloneNode()	Clones an element
closest()	Searches the DOM tree for the closest element that matches a CSS selector
compareDocumentPosition()	Compares the document position of two elements
contains()	Returns true if a node is a descendant of a node
contentEditable	Sets or returns whether the content of an element is editable or not
dir	Sets or returns the value of the dir attribute of an element
firstChild	Returns the first child node of an element
firstElementChild	Returns the first child element of an element
focus()	Gives focus to an element
getAttribute()	Returns the value of an element's attribute
getAttributeNode()	Returns an attribute node
getBoundingClientRect()	Returns the size of an element and its position relative to the viewport
getElementsByClassName()	Returns a collection of child elements with a given class name
getElementsByTagName()	Returns a collection of child elements with a given tag name
hasAttribute()	Returns true if an element has a given attribute
hasAttributes()	Returns true if an element has any attributes
hasChildNodes()	Returns true if an element has any child nodes
id	Sets or returns the value of the id attribute of an element
innerHTML	Sets or returns the content of an element
innerText	Sets or returns the text content of a node and its descendants
insertAdjacentElement()	Inserts a new HTML element at a position relative to an element
insertAdjacentHTML()	Inserts an HTML formatted text at a position relative to an element
insertAdjacentText()	Inserts text into a position relative to an element
insertBefore()	Inserts a new child node before an existing child node
isContentEditable	Returns true if an element's content is editable
isDefaultNamespace()	Returns true if a given namespaceURI is the default
isEqualNode()	Checks if two elements are equal
isSameNode()	Checks if two elements are the same node
isSupported()	Deprecated
lang	Sets or returns the value of the lang attribute of an element
lastChild	Returns the last child node of an element
lastElementChild	Returns the last child element of an element
matches()	Returns true if an element is matched by a given CSS selector
namespaceURI	Returns the namespace URI of an element
nextSibling	Returns the next node at the same node tree level
nextElementSibling	Returns the next element at the same node tree level
nodeName	Returns the name of a node
nodeType	Returns the node type of a node
nodeValue	Sets or returns the value of a node
normalize()	Joins adjacent text nodes and removes empty text nodes in an element
offsetHeight	Returns the height of an element, including padding, border and scrollbar
offsetWidth	Returns the width of an element, including padding, border and scrollbar
offsetLeft	Returns the horizontal offset position of an element
offsetParent	Returns the offset container of an element
offsetTop	Returns the vertical offset position of an element
outerHTML	Sets or returns the content of an element (including the start tag and the end tag)
outerText	Sets or returns the outer text content of a node and its descendants
ownerDocument	Returns the root element (document object) for an element
parentNode	Returns the parent node of an element
parentElement	Returns the parent element node of an element
previousSibling	Returns the previous node at the same node tree level
previousElementSibling	Returns the previous element at the same node tree level
querySelector()	Returns the first child element that matches a CSS selector(s)
querySelectorAll()	Returns all child elements that matches a CSS selector(s)
remove()	Removes an element from the DOM
removeAttribute()	Removes an attribute from an element
removeAttributeNode()	Removes an attribute node, and returns the removed node
removeChild()	Removes a child node from an element
removeEventListener()	Removes an event handler that has been attached with the addEventListener() method
replaceChild()	Replaces a child node in an element
scrollHeight	Returns the entire height of an element, including padding
scrollIntoView()	Scrolls the an element into the visible area of the browser window
scrollLeft	Sets or returns the number of pixels an element's content is scrolled horizontally
scrollTop	Sets or returns the number of pixels an element's content is scrolled vertically
scrollWidth	Returns the entire width of an element, including padding
setAttribute()	Sets or changes an attribute's value
setAttributeNode()	Sets or changes an attribute node
style	Sets or returns the value of the style attribute of an element
tabIndex	Sets or returns the value of the tabindex attribute of an element
tagName	Returns the tag name of an element
textContent	Sets or returns the textual content of a node and its descendants
title	Sets or returns the value of the title attribute of an element
toString()	Converts an element to a string

The Attr Object
In the HTML DOM, an Attr object represents an HTML attribute.

An HTML attribute always belongs to an HTML element.

NamedNodeMap
A NamedNodeMap is an array-like unordered collection of an element's attributes.

In other words: a NamedNodeMap is a list of Attr objects.

A NamedNodeMap has a length property that returns the number of nodes.

The nodes can be accessed by name or index numbes. The index starts at 0.

Attribute Properties
Property	Description
isId	Deprecated
name	Returns an attribute's name
value	Sets or returns an attribute's value
specified	Returns true if the attribute is specified
NamedNodeMap Properties and Methods
Method	Description
getNamedItem()	Returns an attribute node (by name) from a NamedNodeMap
item()	Returns an attribute node (by index) from a NamedNodeMap
length	Returns the number of attributes in a NamedNodeMap
removeNamedItem()	Removes an attribute (node)
setNamedItem()	Sets an attribute (node) by name

HTML DOM Events
HTML DOM events allow JavaScript to register different event handlers on elements in an HTML document.

Events are normally used in combination with functions, and the function will not be executed before the event occurs (such as when a user clicks a button).

For a tutorial about Events, read our JavaScript Events Tutorial.

Event	Description	Belongs To
abort	The event occurs when the loading of a media is aborted	UiEvent, Event
afterprint	The event occurs when a page has started printing, or if the print dialogue box has been closed	Event
animationend	The event occurs when a CSS animation has completed	AnimationEvent
animationiteration	The event occurs when a CSS animation is repeated	AnimationEvent
animationstart	The event occurs when a CSS animation has started	AnimationEvent
beforeprint	The event occurs when a page is about to be printed	Event
beforeunload	The event occurs before the document is about to be unloaded	UiEvent, Event
blur	The event occurs when an element loses focus	FocusEvent
canplay	The event occurs when the browser can start playing the media (when it has buffered enough to begin)	Event
canplaythrough	The event occurs when the browser can play through the media without stopping for buffering	Event
change	The event occurs when the content of a form element, the selection, or the checked state have changed (for <input>, <select>, and <textarea>)	Event
click	The event occurs when the user clicks on an element	MouseEvent
contextmenu	The event occurs when the user right-clicks on an element to open a context menu	MouseEvent
copy	The event occurs when the user copies the content of an element	ClipboardEvent
cut	The event occurs when the user cuts the content of an element	ClipboardEvent
dblclick	The event occurs when the user double-clicks on an element	MouseEvent
drag	The event occurs when an element is being dragged	DragEvent
dragend	The event occurs when the user has finished dragging an element	DragEvent
dragenter	The event occurs when the dragged element enters the drop target	DragEvent
dragleave	The event occurs when the dragged element leaves the drop target	DragEvent
dragover	The event occurs when the dragged element is over the drop target	DragEvent
dragstart	The event occurs when the user starts to drag an element	DragEvent
drop	The event occurs when the dragged element is dropped on the drop target	DragEvent
durationchange	The event occurs when the duration of the media is changed	Event
ended	The event occurs when the media has reach the end (useful for messages like "thanks for listening")	Event
error	The event occurs when an error occurs while loading an external file	ProgressEvent, UiEvent, Event
focus	The event occurs when an element gets focus	FocusEvent
focusin	The event occurs when an element is about to get focus	FocusEvent
focusout	The event occurs when an element is about to lose focus	FocusEvent
fullscreenchange	The event occurs when an element is displayed in fullscreen mode	Event
fullscreenerror	The event occurs when an element can not be displayed in fullscreen mode	Event
hashchange	The event occurs when there has been changes to the anchor part of a URL	HashChangeEvent
input	The event occurs when an element gets user input	InputEvent, Event
invalid	The event occurs when an element is invalid	Event
keydown	The event occurs when the user is pressing a key	KeyboardEvent
keypress	The event occurs when the user presses a key	KeyboardEvent
keyup	The event occurs when the user releases a key	KeyboardEvent
load	The event occurs when an object has loaded	UiEvent, Event
loadeddata	The event occurs when media data is loaded	Event
loadedmetadata	The event occurs when meta data (like dimensions and duration) are loaded	Event
loadstart	The event occurs when the browser starts looking for the specified media	ProgressEvent
message	The event occurs when a message is received through the event source	Event
mousedown	The event occurs when the user presses a mouse button over an element	MouseEvent
mouseenter	The event occurs when the pointer is moved onto an element	MouseEvent
mouseleave	The event occurs when the pointer is moved out of an element	MouseEvent
mousemove	The event occurs when the pointer is moving while it is over an element	MouseEvent
mouseover	The event occurs when the pointer is moved onto an element, or onto one of its children	MouseEvent
mouseout	The event occurs when a user moves the mouse pointer out of an element, or out of one of its children	MouseEvent
mouseup	The event occurs when a user releases a mouse button over an element	MouseEvent
mousewheel	Deprecated. Use the wheel event instead	WheelEvent
offline	The event occurs when the browser starts to work offline	Event
online	The event occurs when the browser starts to work online	Event
open	The event occurs when a connection with the event source is opened	Event
pagehide	The event occurs when the user navigates away from a webpage	PageTransitionEvent
pageshow	The event occurs when the user navigates to a webpage	PageTransitionEvent
paste	The event occurs when the user pastes some content in an element	ClipboardEvent
pause	The event occurs when the media is paused either by the user or programmatically	Event
play	The event occurs when the media has been started or is no longer paused	Event
playing	The event occurs when the media is playing after having been paused or stopped for buffering	Event
popstate	The event occurs when the window's history changes	PopStateEvent
progress	The event occurs when the browser is in the process of getting the media data (downloading the media)	Event
ratechange	The event occurs when the playing speed of the media is changed	Event
resize	The event occurs when the document view is resized	UiEvent, Event
reset	The event occurs when a form is reset	Event
scroll	The event occurs when an element's scrollbar is being scrolled	UiEvent, Event
search	The event occurs when the user writes something in a search field (for <input="search">)	Event
seeked	The event occurs when the user is finished moving/skipping to a new position in the media	Event
seeking	The event occurs when the user starts moving/skipping to a new position in the media	Event
select	The event occurs after the user selects some text (for <input> and <textarea>)	UiEvent, Event
show	The event occurs when a <menu> element is shown as a context menu	Event
stalled	The event occurs when the browser is trying to get media data, but data is not available	Event
storage	The event occurs when a Web Storage area is updated	StorageEvent
submit	The event occurs when a form is submitted	Event
suspend	The event occurs when the browser is intentionally not getting media data	Event
timeupdate	The event occurs when the playing position has changed (like when the user fast forwards to a different point in the media)	Event
toggle	The event occurs when the user opens or closes the <details> element	Event
touchcancel	The event occurs when the touch is interrupted	TouchEvent
touchend	The event occurs when a finger is removed from a touch screen	TouchEvent
touchmove	The event occurs when a finger is dragged across the screen	TouchEvent
touchstart	The event occurs when a finger is placed on a touch screen	TouchEvent
transitionend	The event occurs when a CSS transition has completed	TransitionEvent
unload	The event occurs once a page has unloaded (for <body>)	UiEvent, Event
volumechange	The event occurs when the volume of the media has changed (includes setting the volume to "mute")	Event
waiting	The event occurs when the media has paused but is expected to resume (like when the media pauses to buffer more data)	Event
wheel	The event occurs when the mouse wheel rolls up or down over an element	WheelEvent

HTML DOM Event Properties and Methods
Property/Method	Description	Belongs To
altKey	Returns whether the "ALT" key was pressed when the mouse event was triggered	MouseEvent
altKey	Returns whether the "ALT" key was pressed when the key event was triggered	KeyboardEvent, TouchEvent
animationName	Returns the name of the animation	AnimationEvent
bubbles	Returns whether or not a specific event is a bubbling event	Event
button	Returns which mouse button was pressed when the mouse event was triggered	MouseEvent
buttons	Returns which mouse buttons were pressed when the mouse event was triggered	MouseEvent
cancelable	Returns whether or not an event can have its default action prevented	Event
charCode	Returns the Unicode character code of the key that triggered the onkeypress event	KeyboardEvent
changeTouches	Returns a list of all the touch objects whose state changed between the previous touch and this touch	TouchEvent
clientX	Returns the horizontal coordinate of the mouse pointer, relative to the current window, when the mouse event was triggered	MouseEvent, TouchEvent
clientY	Returns the vertical coordinate of the mouse pointer, relative to the current window, when the mouse event was triggered	MouseEvent, TouchEvent
clipboardData	Returns an object containing the data affected by the clipboard operation	ClipboardData
code	Returns the code of the key that triggered the event	KeyboardEvent
composed	Returns whether the event is composed or not	Event
ctrlKey	Returns whether the "CTRL" key was pressed when the mouse event was triggered	MouseEvent
ctrlKey	Returns whether the "CTRL" key was pressed when the key event was triggered	KeyboardEvent, TouchEvent
currentTarget	Returns the element whose event listeners triggered the event	Event
data	Returns the inserted characters	InputEvent
dataTransfer	Returns an object containing the data being dragged/dropped, or inserted/deleted	DragEvent, InputEvent
defaultPrevented	Returns whether or not the preventDefault() method was called for the event	Event
deltaX	Returns the horizontal scroll amount of a mouse wheel (x-axis)	WheelEvent
deltaY	Returns the vertical scroll amount of a mouse wheel (y-axis)	WheelEvent
deltaZ	Returns the scroll amount of a mouse wheel for the z-axis	WheelEvent
deltaMode	Returns a number that represents the unit of measurements for delta values (pixels, lines or pages)	WheelEvent
detail	Returns a number that indicates how many times the mouse was clicked	UiEvent
elapsedTime	Returns the number of seconds an animation has been running	AnimationEvent
elapsedTime	Returns the number of seconds a transition has been running	 
eventPhase	Returns which phase of the event flow is currently being evaluated	Event
getTargetRanges()	Returns an array containing target ranges that will be affected by the insertion/deletion	InputEvent
getModifierState()	Returns an array containing target ranges that will be affected by the insertion/deletion	MouseEvent
inputType	Returns the type of the change (i.e "inserting" or "deleting")	InputEvent
isComposing	Returns whether the state of the event is composing or not	InputEvent, KeyboardEvent
isTrusted	Returns whether or not an event is trusted	Event
key	Returns the key value of the key represented by the event	KeyboardEvent
key	Returns the key of the changed storage item	StorageEvent
keyCode	Returns the Unicode character code of the key that triggered the onkeypress event, or the Unicode key code of the key that triggered the onkeydown or onkeyup event	KeyboardEvent
location	Returns the location of a key on the keyboard or device	KeyboardEvent
lengthComputable	Returns whether the length of the progress can be computable or not	ProgressEvent
loaded	Returns how much work has been loaded	ProgressEvent
metaKey	Returns whether the "META" key was pressed when an event was triggered	MouseEvent
metaKey	Returns whether the "meta" key was pressed when the key event was triggered	KeyboardEvent, TouchEvent
MovementX	Returns the horizontal coordinate of the mouse pointer relative to the position of the last mousemove event	MouseEvent
MovementY	Returns the vertical coordinate of the mouse pointer relative to the position of the last mousemove event	MouseEvent
newValue	Returns the new value of the changed storage item	StorageEvent
newURL	Returns the URL of the document, after the hash has been changed	HasChangeEvent
offsetX	Returns the horizontal coordinate of the mouse pointer relative to the position of the edge of the target element	MouseEvent
offsetY	Returns the vertical coordinate of the mouse pointer relative to the position of the edge of the target element	MouseEvent
oldValue	Returns the old value of the changed storage item	StorageEvent
oldURL	Returns the URL of the document, before the hash was changed	HasChangeEvent
onemptied	The event occurs when something bad happens and the media file is suddenly unavailable (like unexpectedly disconnects)	 
pageX	Returns the horizontal coordinate of the mouse pointer, relative to the document, when the mouse event was triggered	MouseEvent
pageY	Returns the vertical coordinate of the mouse pointer, relative to the document, when the mouse event was triggered	MouseEvent
persisted	Returns whether the webpage was cached by the browser	PageTransitionEvent
preventDefault()	Cancels the event if it is cancelable, meaning that the default action that belongs to the event will not occur	Event
propertyName	Returns the name of the CSS property associated with the animation or transition	AnimationEvent, TransitionEvent
pseudoElement	Returns the name of the pseudo-element of the animation or transition	AnimationEvent, TransitionEvent
region		MouseEvent
relatedTarget	Returns the element related to the element that triggered the mouse event	MouseEvent
relatedTarget	Returns the element related to the element that triggered the event	FocusEvent
repeat	Returns whether a key is being hold down repeatedly, or not	KeyboardEvent
screenX	Returns the horizontal coordinate of the mouse pointer, relative to the screen, when an event was triggered	MouseEvent
screenY	Returns the vertical coordinate of the mouse pointer, relative to the screen, when an event was triggered	MouseEvent
shiftKey	Returns whether the "SHIFT" key was pressed when an event was triggered	MouseEvent
shiftKey	Returns whether the "SHIFT" key was pressed when the key event was triggered	KeyboardEvent, TouchEvent
state	Returns an object containing a copy of the history entries	PopStateEvent
stopImmediatePropagation()	Prevents other listeners of the same event from being called	Event
stopPropagation()	Prevents further propagation of an event during event flow	Event
storageArea	Returns an object representing the affected storage object	StorageEvent
target	Returns the element that triggered the event	Event
targetTouches	Returns a list of all the touch objects that are in contact with the surface and where the touchstart event occured on the same target element as the current target element	TouchEvent
timeStamp	Returns the time (in milliseconds relative to the epoch) at which the event was created	Event
total	Returns the total amount of work that will be loaded	ProgressEvent
touches	Returns a list of all the touch objects that are currently in contact with the surface	TouchEvent
transitionend	The event occurs when a CSS transition has completed	TransitionEvent
type	Returns the name of the event	Event
url	Returns the URL of the changed item's document	StorageEvent
which	Returns which mouse button was pressed when the mouse event was triggered	MouseEvent
which	Returns the Unicode character code of the key that triggered the onkeypress event, or the Unicode key code of the key that triggered the onkeydown or onkeyup event	KeyboardEvent
view	Returns a reference to the Window object where the event occurred	UiEvent

Event Objects
When an event occurs in HTML, the event belongs to a certain event object, like a mouse click event belongs to the MouseEvent object.

For a tutorial about Events, read our JavaScript Events Tutorial.

The Event Object
All event objects are based on the Event Object, and inherit all of their properties and methods

Event Object	Description
Event	The parent of all event objects
Other Event Objects
These are the most common event objects:

Event Object	Description
AnimationEvent	For CSS animations
ClipboardEvent	For modification of the clipboard
DragEvent	For drag and drop interaction
FocusEvent	For focus-related events
HashChangeEvent	For changes in the anchor part of the URL
InputEvent	For user input
KeyboardEvent	For keyboard interaction
MouseEvent	For mouse interaction
PageTransitionEvent	For navigating to, and away from, web pages
PopStateEvent	For changes in the history entry
ProgressEvent	For the progress of loading external resources
StorageEvent	For changes in the window's storage area.
TouchEvent	For touch interaction
TransitionEvent	For CSS transitions
UiEvent	For user interface interaction
WheelEvent	For mousewheel interaction


HTMLCollection vs NodeList
An HTMLCollection is almost the same as a NodeList.

See the description below.

WHO Returns an HTMLCollection?
The getElementsByTagName() Method

The getElementsByClassName() Method

The children Property

Properties and Methods
The following properties and methods can be used on an HTMLCollection:

Name	Description
length	Returns the number of elements in an HTMLCollection
item()	Returns the element at a specified index
namedItem()	Returns the element with a specified id
Examples
Example
Get all parapgraphs:

const elements = document.getElementsByTagName("p");
Example
The number of <p> elements in the document are:

const elements = document.getElementsByTagName("p");
let numb = elements.length;
Example
Loop over the elements in an HTMLCollection:

const elements = document.getElementsByTagName("*");
for (let i = 0; i < elements.length; i++) {
.. some code ..
}
Not an Array
An HTMLCollection is not an Array!

An HTMLCollection may look like an array, but it is not.

You can loop through an HTMLCollection and refer to its elements with an index.

But you cannot use Array methods like push(), pop(), or join() on an HTMLCollection.

The Difference Between an HTMLCollection and a NodeList
A NodeList and an HTMLcollection is very much the same thing.

Both are array-like collections (lists) of nodes (elements) extracted from a document. The nodes can be accessed by index numbers. The index starts at 0.

Both have a length property that returns the number of elements in the list (collection).

An HTMLCollection is a collection of document elements.

A NodeList is a collection of document nodes (element nodes, attribute nodes, and text nodes).

HTMLCollection items can be accessed by their name, id, or index number.

NodeList items can only be accessed by their index number.

An HTMLCollection is always a live collection. Example: If you add a <li> element to a list in the DOM, the list in the HTMLCollection will also change.

A NodeList is most often a static collection. Example: If you add a <li> element to a list in the DOM, the list in NodeList will not change.

The getElementsByClassName() and getElementsByTagName() methods return a live HTMLCollection.

The querySelectorAll() method returns a static NodeList.

The childNodes property returns a live NodeList.

NodeList vs. HTMLCollection
A NodeList is almost the same as an HTMLCollection.

See the description below.

Who Returns a NodeList?
The childNodes() Method

The querySelectorAll() Method

The getElementsByName() Method

Properties and Methods
The following properties and methods can be used on a NodeList:

Name	Description
entries()	Returns an Iterator with the key/value pairs from the list
forEach()	Executes a callback function for each node in the list
item()	Returns the node at a specified index
keys()	Returns an Iterator with the keys from the list
length	Returns the number of nodes in a NodeList
values()	Returns an Iterator with the values from the list
Example
Select all <p> nodes in a document:

const myNodeList = document.querySelectorAll("p");
The elements in the NodeList can be accessed by an index number.

To access the second <p> node you can write:

myNodeList[1]
Note: The index starts at 0.

HTML DOM Node List Length
The length property defines the number of nodes in a node list:

Example
myNodelist.length
The length property is useful when you want to loop through the nodes in a node list:

Example
Change the color of all <p> elements in a node list:

const myNodelist = document.querySelectorAll("p");
for (let i = 0; i < myNodelist.length; i++) {
  myNodelist[i].style.color = "red";
}
Not an Array
A NodeList is not an Array!

A NodeList may look like an array, but it is not.

You can loop through a NodeList and refer to its nodes with an index.

But you cannot use Array methods like push(), pop(), or join() on a NodeList.

The Difference Between an HTMLCollection and a NodeList
A NodeList and an HTMLcollection is very much the same thing.

Both are array-like collections (lists) of nodes (elements) extracted from a document. The nodes can be accessed by index numbers. The index starts at 0.

Both have a length property that returns the number of elements in the list (collection).

An HTMLCollection is a collection of document elements.

A NodeList is a collection of document nodes (element nodes, attribute nodes, and text nodes).

HTMLCollection items can be accessed by their name, id, or index number.

NodeList items can only be accessed by their index number.

An HTMLCollection is always a live collection. Example: If you add a <li> element to a list in the DOM, the list in the HTMLCollection will also change.

A NodeList is most often a static collection. Example: If you add a <li> element to a list in the DOM, the list in NodeList will not change.

The getElementsByClassName() and getElementsByTagName() methods return a live HTMLCollection.

The querySelectorAll() method returns a static NodeList.

The childNodes property returns a live NodeList.

Live NodeList
In some cases, the NodeList is live: A change in the DOM updates the NodeList.

The childNodes method returns a live NodeList.

DOMTokenList
A DOMTokenList is a set of space separated tokens.

A DOMTokenList can be accessed by index (starts at 0).

The length Property returns the number of tokens in a DOMTokenList.

Note
The The classList Property of an HTML element represents a DOMTokenList.

DOMTokenList Properties and Methods
Name	Description
add()	Adds one or more tokens to the list
contains()	Returns true if the list contains a class
entries()	Returns an Iterator with key/value pairs from the list
forEach()	Executes a callback function for each token in the list
item()	Returns the token at a specified index
keys()	Returns an Iterator with the keys in the list
length	Returns the number of tokens in the list
remove()	Removes one or more tokens from the list
replace()	Replaces a token in the list
supports()	Returns true if a token is one of an attribute's supported tokens
toggle()	Toggles between tokens in the list
value	Returns the token list as a string
values()	Returns an Iterator with the values in the list
Examples
Add a "myStyle" class to an element:

element.classList.add("myStyle");
Remove the "myStyle" class from an element:

element.classList.remove("myStyle");
Toggle "myStyle" on and off:

element.classList.toggle("myStyle");
More examples below.

Not an Array
A DOMTokenList is not an Array!

A DOMTokenList may look like an array, but it is not.

You can loop through a DOMTokenList and refer to its token with an index.

But you cannot use Array methods like push(), pop(), or join() on a DOMTokenList.

Add multiple classes to the an element:

element.classList.add("myStyle", "anotherClass", "thirdClass");
Remove multiple classes from an element:

element.classList.remove("myStyle", "anotherClass", "thirdClass");
Get the number off class names for an element:

let numb = element.classList.length;
Get the class names of the "myDIV" element:

<div id="myDIV" class="myStyle anotherClass thirdClass">
<p>I am myDIV.</p>
</div>

const list = document.getElementById("myDIV").classList;
Get the first class of an element:

let className = element.classList.item(0);
Does an an element has a "myStyle" class?

let x = element.classList.contains("myStyle");
Remove "anotherClass" if an element has a "myStyle" class.

if (element.classList.contains("mystyle")) {
  element.classList.remove("anotherClass");
}
Toggle between classes to create a dropdown button:

document.getElementById("myBtn").onclick = function() {myFunction()};

function myFunction() {
  document.getElementById("myDropdown").classList.toggle("show");
}
Create a sticky navigation bar:

// Get the navbar
const navbar = document.getElementById("navbar");

// Get the offset position of the navbar
const sticky = navbar.offsetTop;

// Add the sticky class to the navbar when you reach its scroll position
// Remove it when you leave the scroll position
function myFunction() {
  if (window.pageYOffset  >= sticky) {
    navbar.classList.add("sticky")
  } else {
    navbar.classList.remove("sticky");
  }
}
